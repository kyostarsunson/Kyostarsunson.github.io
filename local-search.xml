<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Something about React</title>
    <link href="/2023/04/09/something-about-react/"/>
    <url>/2023/04/09/something-about-react/</url>
    
    <content type="html"><![CDATA[<h2 id="What-is-React"><a href="#What-is-React" class="headerlink" title="What is React"></a>What is React</h2><p>React is a popular JavaScript library that simplifies front-end UI development. Initially developed by Facebook in 2013, it has since been open-sourced and used to build some of the most widely-used apps, giving Facebook and Instagram the lead among countless apps. React’s core functionality is its ability to allow developers to easily track the UI and its state at any point in time, achieved by dividing the UI into components. This makes front-end development work easier, and its ecosystem includes a plethora of useful libraries and tools. In this blog post, I will provide a preliminary introduction to React, starting from the basics, and include relevant case studies combined with CPRG-356 homework content, so that everyone can gain a superficial understanding of React.<br>  <img src="/img/react.jpg"></p><h2 id="Backgroup-about-Web-amp-The-DOM-struction"><a href="#Backgroup-about-Web-amp-The-DOM-struction" class="headerlink" title="Backgroup about Web &amp; The DOM struction"></a>Backgroup about Web &amp; The DOM struction</h2><p>The Document Object Model (DOM) is an interface that allows JavaScript to manipulate web pages. It converts a web page into a JavaScript object, enabling various operations such as adding and deleting content using scripts. As HTML loads in the browser, the structured documents (such as HTML and XML) are parsed into a series of nodes based on the DOM model, which forms a tree structure known as the DOM Tree. All nodes and the final tree structure have a standardized external interface known as the DOM. This interface specification can be implemented in various languages, meaning that DOM is not strictly part of JavaScript syntax. However, DOM manipulation is a common task in JavaScript, and without DOM, JavaScript would not be able to control web pages. It’s worth noting that JavaScript is the language most commonly used for DOM manipulation.<br>  <img src="/img/dom.jpg"></p><h2 id="The-conplexcity-of-web-development"><a href="#The-conplexcity-of-web-development" class="headerlink" title="The conplexcity of web development"></a>The conplexcity of web development</h2><p>Before the advent of React, front-end interface development using HTML was becoming increasingly complex. Traditional UI operations required mastering a lot of APIs to update the UI, while the scattered application state made it difficult to track and maintain. Developers often relied on jQuery or page actions to operate on the DOM, resulting in a bottleneck when dealing with complex front-end logic. As a result, maintaining page development became increasingly challenging.<br>React addressed these problems by replacing traditional partial refresh with global refresh. This approach allows developers to focus on data state changes and final UI presentation, while React automatically handles the complicated DOM operations. As a result, front-end development became less complex and more efficient.<br>In addition, React componentizes front-end pages, such as forms, which increases the code reuse rate and improves the efficiency of product development. Componentization also makes the code easier to understand, test, and maintain.<br>  <img src="/img/complexity.jpg"></p><h2 id="React-design"><a href="#React-design" class="headerlink" title="React design"></a>React design</h2><p>Many people consider React to be the View component in the MVC (Model-View-Controller) architecture, specifically aimed at reducing the complexity of developing views. React is also designed to build large-scale applications with data that changes over time. To accomplish this, React incorporates three main ideas:</p><h3 id="Simple"><a href="#Simple" class="headerlink" title="Simple"></a>Simple</h3><p>React streamlines front-end development by allowing developers to specify the desired appearance of their application at any given moment, and then automatically updating the UI when the underlying data changes.</p><h3 id="Declarative"><a href="#Declarative" class="headerlink" title="Declarative"></a>Declarative</h3><p>After the data changes, React updates only the changed parts of the user interface, similar to clicking the “refresh” button but without the need to reload the entire page.</p><h3 id="Build-composable-components"><a href="#Build-composable-components" class="headerlink" title="Build composable components"></a>Build composable components</h3><p>React is focused on creating reusable components, and building components is the core of React development. Components in React are encapsulated and can be easily reused, which simplifies code reuse, testing, and separation of concerns</p><h2 id="Try-it-first"><a href="#Try-it-first" class="headerlink" title="Try it first"></a>Try it first</h2><p>Below, I will introduce how to develop the simplest program with React” is grammatically correct. However, if you would like to modify it for clarity, you could consider adding some context or explanation to help the reader better understand what you are referring to. For example: “In the following section, I will provide a step-by-step guide on how to develop a basic program using React.</p><h3 id="Build-hello-world"><a href="#Build-hello-world" class="headerlink" title="Build hello world"></a>Build hello world</h3><ul><li>step1： install<br>React can be downloaded and used directly, and the download package also provides many learning examples. For this tutorial, we will be using React version v17.0.2, which can be downloaded from the official website at <a href="http://facebook.github.io/React/">http://facebook.github.io/React/</a>.</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;script src<span class="hljs-operator">=</span><span class="hljs-string">&quot;https://unpkg.com/React@17/umd/React.production.min.js&quot;</span> rel<span class="hljs-operator">=</span><span class="hljs-string">&quot;external nofollow&quot;</span> rel<span class="hljs-operator">=</span><span class="hljs-string">&quot;external nofollow&quot;</span> &gt;&lt;/script&gt;<br>&lt;script src<span class="hljs-operator">=</span><span class="hljs-string">&quot;https://unpkg.com/React-dom@17/umd/React-dom.production.min.js&quot;</span> rel<span class="hljs-operator">=</span><span class="hljs-string">&quot;external nofollow&quot;</span> rel<span class="hljs-operator">=</span><span class="hljs-string">&quot;external nofollow&quot;</span> &gt;&lt;/script&gt;<br>&lt;script src<span class="hljs-operator">=</span><span class="hljs-string">&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;</span> rel<span class="hljs-operator">=</span><span class="hljs-string">&quot;external nofollow&quot;</span> rel<span class="hljs-operator">=</span><span class="hljs-string">&quot;external nofollow&quot;</span> &gt;&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><ul><li>step2: some simple code<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>New City Bakeries<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/style.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://fonts.googleapis.com/css2?family=Noto+Serif&amp;display=swap&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/react/16.4.0/umd/react.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/react-dom/16.4.0/umd/react-dom.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/babel-standalone/6.26.0/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> msg = <span class="hljs-string">&quot;Hello world&quot;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> (</span><br><span class="language-javascript">                    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;msg&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="language-javascript">                )</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">HelloWorld</span> /&gt;</span></span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;example&#x27;</span>)</span><br><span class="language-javascript">        );</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>it will show like this<br><img src="/img/hello.jpg"></li></ul><h2 id="Introduct-React-JSX"><a href="#Introduct-React-JSX" class="headerlink" title="Introduct React JSX"></a>Introduct React JSX</h2><p>JSX is the core component of React. It uses XML markup to directly declare the interface, and interface components can be nested with each other.<br>React uses JSX instead of regular JavaScript.<br>JSX is a syntax extension to JavaScript that looks a lot like XML.<br>We don’t have to use JSX, but it has the following advantages:<br>• JSX executes faster because it is optimized after compilation to JavaScript code.<br>• It is type-safe and errors are caught during compilation.<br>• Writing templates using JSX is easier and faster.</p><h3 id="Use-JSX"><a href="#Use-JSX" class="headerlink" title="Use JSX"></a>Use JSX</h3><p>JSX looks similar to HTML, we can see an example:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, world!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>,<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;example&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><p>We can nest multiple HTML tags in the above code, and we need to use a div element to wrap it. The p element in the example adds a custom attribute data-myattribute, and adding a custom attribute requires a data- prefix.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My React BLOG<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>hello world by React<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">data-myattribute</span> = <span class="hljs-string">&quot;somevalue&quot;</span>&gt;</span>hello React!!!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>,<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;example&#x27;</span>)<br>);<br><br></code></pre></td></tr></table></figure><h3 id="Independent-file"><a href="#Independent-file" class="headerlink" title="Independent file"></a>Independent file</h3><p>Your React JSX code can be placed in a separate file, for example, we create a helloworld_React.js file, the code is as follows:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, world!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>,<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;example&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><p>Then import the JS file in the HTML file:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;helloworld_React.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="JavaScript-expressions"><a href="#JavaScript-expressions" class="headerlink" title="JavaScript expressions"></a>JavaScript expressions</h3><p>We can use JavaScript expressions in JSX. Expressions are written within curly braces . Examples are as follows：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;1+1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>,<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;example&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><p>You cannot use if else statements in JSX, but you can use conditional (ternary operation) expressions instead. In the following example, if the variable i is equal to 1, the browser will output true, and if the value of i is modified, it will output false.</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xquery">ReactDOM.render(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="language-xquery">&#123;i == <span class="hljs-number">1</span> ? <span class="hljs-string">&#x27;True!&#x27;</span> : <span class="hljs-string">&#x27;False&#x27;</span>&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>,<br>   <span class="hljs-built_in"> document</span>.getElementById(<span class="hljs-string">&#x27;example&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><h3 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h3><p>React recommends using inline styles. We can use camelCase syntax to set inline styles. React will automatically add px after the specified element number. The following example demonstrates adding the myStyle inline style to the h1 element：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myStyle = &#123;<br>    fontSize : <span class="hljs-number">80</span>,<br>    color : <span class="hljs-string">&quot;#FF0000&quot;</span><br>&#125;;<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span> = <span class="hljs-string">&#123;myStyle&#125;</span>&gt;</span>My React BLOG<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>,<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;example&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h3><p>Comments need to be written in curly braces, examples are as follows：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">ReactDOM.render(</span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h1My</span> <span class="hljs-attr">React</span> <span class="hljs-attr">BLOG</span>&lt;/<span class="hljs-attr">h1</span>&gt;</span></span><br><span class="language-xml">        </span><span class="hljs-template-tag">&#123;/*<span class="hljs-name">comment...............</span>*/&#125;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>,</span><br><span class="language-xml">    document.getElementById(&#x27;example&#x27;)</span><br><span class="language-xml">);</span><br></code></pre></td></tr></table></figure><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p>JSX allows inserting arrays in templates, and arrays will automatically expand all members:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My React BLOG<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>,<br>    &lt;h2&gt;<span class="hljs-title class_">My</span> first <span class="hljs-title class_">React</span> blog./h2&gt;,<br>];<br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;arr&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>,<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;example&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><h3 id="HTML-tags-vs-React-components"><a href="#HTML-tags-vs-React-components" class="headerlink" title="HTML tags vs. React components"></a>HTML tags vs. React components</h3><p>React can render HTML tags (strings) or React components (classes).<br>To render HTML tags, just use lowercase tag names in JSX.<br>var myDivElement &#x3D; <div className="foo" />;<br>ReactDOM.render(myDivElement, document.getElementById(‘example’));</p><p>To render a React component, just create a local variable starting with a capital letter.<br>var MyComponent &#x3D; React.createClass({&#x2F;<em>…</em>&#x2F;});<br>var myElement &#x3D; <MyComponent someProperty={true} />;<br>ReactDOM.render(myElement, document.getElementById(‘example’));<br>React’s JSX uses a capital-lowercase convention to distinguish native component classes from HTML tags.<br>Notice:<br>Since JSX is JavaScript, some identifiers like class and for are not recommended as XML attribute names. Instead, React DOM uses className and htmlFor as corresponding attributes.</p><h2 id="How-to-design-WEB-assignment-React-by-using-React"><a href="#How-to-design-WEB-assignment-React-by-using-React" class="headerlink" title="How to design WEB assignment React by using React"></a>How to design WEB assignment React by using React</h2><ul><li><p>In our cprg 356 WEB assignment React , you should delete all the html in your pre coding and use React and Adjx to product the coding. Such like this.<br><img src="/img/cprg356.jpg"></p></li><li><p>And use react to coding the login page.<br><img src="/img/cprg356-react.jpg"></p></li></ul><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>The React framework contains a lot more than what has been covered in this blog post. This post aimed to introduce the most important aspects that are essential to get started with React. Some topics have been highlighted, and more will be added in future posts as opportunities arise.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Something about Node.js</title>
    <link href="/2023/02/26/Something-about-Node-js/"/>
    <url>/2023/02/26/Something-about-Node-js/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/Node.js_logo.png"></p><h1 id="The-background"><a href="#The-background" class="headerlink" title="The background"></a>The background</h1><p>In the last of 2000, Mr.Ryan Dahl, one of the software engineers develop Node.js. At that time, all web server is like Apache or IIS. It is difficult for software developers to create a website because always needs plenty of technology, which we call technology stack. In most of the case in those years, the front engineer knows the language JAVASCRIPT and HTML but they can’t use them to build the function running on the server. This method is what we call a kind of heavyweight approach. So under this situation and with the hope to be better to accomplish the development work, he develops node.js.</p><h1 id="What-is-Node-js"><a href="#What-is-Node-js" class="headerlink" title="What is Node.js"></a>What is Node.js</h1><p>As a result of this original purpose and design idea，node.js is designed to run in the server and provider a better easy management solution to build this website server instead of using the complicated specific website server application. And it is not a kind of framework, is not a library of software as well. It is the running environment of JavaScript. A little like the compilation environment of JAVA. This environment makes JavaScript can run on the server and makes JAVASCRIPT the ability to provide functionality like other languages like C#, JAVA, and PYTHON in the website area. Besides these, Node.js is based on the Chrome V8 JavaScript engine. It is EVEN-DRIVEN, and no blocked I&#x2F;O model.</p><h1 id="The-History-of-node-js"><a href="#The-History-of-node-js" class="headerlink" title="The History of node.js"></a>The History of node.js</h1><p>Feb 2009, Ryan Dahl announce his plan that he will prepare and release a lightweight web server kit.</p><p>May 2009, Ryan Dahl released in GitHub the first version of Node, and in the last months, some developers start to use it to develop.</p><p>At the end of 2010, Node.Js gets the fund of Joyent, so he begins to develop it as a full-time job.</p><p>July 2011, Node released a Windows version with the help of Microsoft.</p><p>2013, the first Blog platform based on Node.js born, GHOST</p><p>2016, Yarn is born.</p><p>2018, Node 10 release</p><p>2021, Node.js 17 release.</p><h1 id="Some-terms-or-concept"><a href="#Some-terms-or-concept" class="headerlink" title="Some terms or concept:"></a>Some terms or concept:</h1><h2 id="Serverless"><a href="#Serverless" class="headerlink" title="Serverless"></a>Serverless</h2><p>If we get the response from a serverless service, it means that once we deploy this service, we don’t need to deploy the server first, such as Node.js. So if we are going to deploy the node.js, we can deploy it in any response machine, that is call function point or FAAS, function as a service. Nowadays, often be deployed in the cloud environment.</p><h2 id="V8-JavaScript-enginer"><a href="#V8-JavaScript-enginer" class="headerlink" title="V8 JavaScript enginer"></a>V8 JavaScript enginer</h2><p>V8 is the name of Chrome’s built-in JAVASCRIPT engine. When the user opens Chrome, Chrome will use the V8 engine to execute all the JavaScript.</p><p>V8 also provides an environment that can execute HTML5 DOM analysis. What I want to emphasize is the V8 engine is isolated from Chrome, this feature makes Node.js become available. As a result, V8 in early 2009, was chosen as Node.js as a Javascript engine, and Node.js become more and more popular. the V8 can regard as the base for Node.js to code a powerful environment. </p><h1 id="The-benefit"><a href="#The-benefit" class="headerlink" title="The benefit"></a>The benefit</h1><p>Based on the foundation of Chrome V8 engineer technology. The development time of Using JavaScript to code firmly decreases and this always leads to cost save incredibly. Because the high-performance requirement is the key point for Node. It is dependent on the even drive method and it is using this benefit to develop a high extension server. Node.js is using event loop architect and it always makes extension more easy and safe. Node chooses a way that not only improves the performance and decreases the difficulties, but it is also one of the special features of Node.js.</p><p>The second benefit is the non-blocked libraries. By comparing another language, when node.js visit the file system, the database system, it doesn’t wait until the resource response. The none-block will notify Node.js when it gets ready. So it is a little like doing like in the event ONMOUSEMOVE and HTML DOM, which the JavaScript engineers are always familiar with.<br>The community of NodeJS is essential. The base of the maturity of the community provides lots of libraries and modules. For example, some library is including lots of functions like databases and others software connect drivers. All this reduces the time spend on it.</p><h1 id="What-some-application-use-the-node-js-technology"><a href="#What-some-application-use-the-node-js-technology" class="headerlink" title="What some application use the node.js technology?"></a>What some application use the node.js technology?</h1><ol><li>Uber.</li><li>Paypal</li><li>LinkedIn</li></ol><h1 id="The-diffreent-betwen-Node-js-and-brower"><a href="#The-diffreent-betwen-Node-js-and-brower" class="headerlink" title="The diffreent betwen Node.js and brower."></a>The diffreent betwen Node.js and brower.</h1><p>Node.js is using JavaScript as a coding language and in the browser program the engineer also uses script this tag to code. But these two kinds of coding are absolutely not the same. Although the language is the same but in Node.js, javascript can be considered as like it directly running on the server or service-providing machine rather than the client machine. </p><h1 id="How-to-make-a-first-node-js-application"><a href="#How-to-make-a-first-node-js-application" class="headerlink" title="How to make a first node.js application."></a>How to make a first node.js application.</h1><ol><li><p>Install Node.js<br>There are several ways to easily install Node.js, use package manager tools like npm, or you can just go to the website here, or directly download Node.js to setup.</p></li><li><p>How to use node.<br>If you are on a windows platform, just find the Node.js icon and run it. It is obvious that you can in here use your javascript to code.<br>If you are in Linux or Mac environment, run the node , than you can enter the node.js interact interface。<br>Try to run this:</p></li></ol><p><img src="/img/12.png"></p><p>   You can get the answer 3 just like this image.<br>   Your coding is running correctly. And you can use Ctrl-D to log out the environment.</p><p>   The second way it more popular is, you are support to write a JS coding in a separate file, such like  abc.js.<br>    And use node abc.js to compile and run it.</p><ol start="3"><li>Develop Your first web server by using node.js.<br>How to using node.js to build your first website like HELLO WORLD rather than setting a apacha or nginx server. You just need use this following code.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><span class="hljs-keyword">const</span> hostname = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span><br><span class="hljs-keyword">const</span> port = <span class="hljs-number">4000</span><br><br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;  <br>    res.<span class="hljs-property">statusCode</span> = <span class="hljs-number">200</span>  <br>    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/plain&#x27;</span>)  <br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;Hello World, Hello Sait student!\n&#x27;</span>)<br>&#125;)<br><br>server.<span class="hljs-title function_">listen</span>(port, hostname, <span class="hljs-function">() =&gt;</span> &#123;  <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Server running at http://<span class="hljs-subst">$&#123;hostname&#125;</span>:<span class="hljs-subst">$&#123;port&#125;</span>/`</span>)<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>And when you open your website, you can see the website is established as follow.</p><p><img src="/img/website4000.png"></p><ol start="4"><li><p>How to quit node.js program</p><p> Temerita Nods.js<br> In the console, use key ctrl-c close.<br> In the program, process.exit() to terminal by force.<br> That means all the waiting which are looking for the retracement are going to the terminal will be terminated, such as the network response, and any of the filesystem access.<br> Or you can transfer the parament such as process.exit(1) to wait for the OS response and exit.</p></li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">process.exitCode</span> = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>It will wait for all the waiting finish and Node.js will exist this code.</p><ol start="5"><li>How to print the log informat to the console<br>Debugging action for most software engineers is essential. One of the kindest frequent actions is to print to the console to see the error or some key information. So Node.js here also provides console.log function. The console module in Node.js has plenty of very useful methods to interact with the console, which makes debug become easier. It is a little like the console in the browser.<br>Here is some example to show how it works:</li></ol><p>First one is the most frequencly use </p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>();<br><br></code></pre></td></tr></table></figure><p>This commmand will transfer the letter and print to the console. And it can also print an object and more than on vailable.</p><p>Such like this code:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">const x = &#x27;<span class="hljs-number">11111111</span>&#x27;<br>const y = &#x27;<span class="hljs-number">22222222</span>&#x27;<br>console.<span class="hljs-built_in">log</span>(x, y)<br><br></code></pre></td></tr></table></figure><p>it will print all the x and y, such as the following:</p><p><img src="/img/console.png"></p><p>And if we want to format the outprint, we can also use the format vaiable to declare the output and it will make the result more clean.</p><p>For example</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">console.<span class="hljs-built_in">log</span>(&#x27;My SAIT <span class="hljs-built_in">name</span> <span class="hljs-keyword">is</span> %s, <span class="hljs-keyword">my</span> SAIT <span class="hljs-built_in">id</span> <span class="hljs-keyword">is</span>&#x27;, &#x27;Songlie Xu&#x27;, <span class="hljs-number">000886152</span>)<br></code></pre></td></tr></table></figure><p>And the console will show:</p><p><img src="/img/format.png"></p><p>the formate parament meaning is:</p><p>%s formate a parament to STRING<br>%d or %i formate a parament to INTERGER<br>%fformate to parament to FLOAT<br>%O print an object</p><p>For example </p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const <span class="hljs-built_in">Number</span>=<span class="hljs-number">000886152</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;%O&#x27;</span>, <span class="hljs-built_in">Number</span>)<br></code></pre></td></tr></table></figure><p><img src="/img/saitid.png"></p><p>use this following to delete all the letters in the console</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.clear() clean the <span class="hljs-built_in">console</span><br></code></pre></td></tr></table></figure><h1 id="At-the-end"><a href="#At-the-end" class="headerlink" title="At the end"></a>At the end</h1><p>Node.js gives us a new and creative kind of way to consider how to solve a problem, which is not legalistic. With the help of that, just try and run your first node.js and show your ability to solve different problems. Click here to try by your own Node.js. <a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/02/26/hello-world/"/>
    <url>/2023/02/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
